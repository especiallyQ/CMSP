export default {
    login: {
        user: 'User',
        password: 'Password',
        verificationCode: 'Verification Code',
        login: 'Login'
    },
    inputText: {
        user: 'Please enter User',
        password: 'Please enter Password',
        verificationCode: 'Verification Code'
    },
    text: {
        reqOvertime: 'Request Timeout',
        loginFail: 'Login Failed',
        systemError: 'System Error',
        delete: 'Delete',
        update: 'Change',
        confirmDelete: 'Are you sure to delete',
        sure: 'Ok',
        cancel: 'Cancel',
        close: 'Close',
        select: 'Please select',
        updateSuccessMsg: 'Update Success',
        noData: 'No Data',
        search: 'Search',
        confirmResetPwd: 'Confirm to reset password?',
        resetPwdSuccess: 'Reset password success',
        addSuccess: 'Added Successfully',
        copySuccess: 'Copy Successfully',
        resetSuccess: 'Delete successful',
        chainVersion: 'Chain Version',
        cmspVersion: 'CMSP Version',
        supportVersion: 'Support Version',
        uploadFileEmpty: 'The upload file is empty',
        contractExist: 'The contract name already exists',
        remarks: 'remarks',
        sequence: 'sequence',
        unknown: 'Unknown',
        poadmin: 'PO Admin',
        pooper: 'PO Operator',
        puadmin: 'PU Admin',
        puoper: 'PU Operator',
        adadmin: 'AD Admin',
        viewDetail: 'Detail',
        back: 'Back',
        upLoadFile: 'Upload File',
        oneUploadFileTip: 'Only one file can be uploaded. If you need to replace it, please remove the current file first',
        addNew: 'Add',
        deleteRow: 'Delete',
        all: 'All',
        operation: 'Action',
        viewTable: 'Table View',
        viewCard: 'Card View',
        noRemark: 'No remark',
        yes: 'Yes',
        no: 'No',
        checkAll: 'Check All',
        checkReverse: 'Check Reverse',
        batchTipPrefix: 'Selected',
        batchTipSuffix: ''
    },
    rule: {
        textLong: '1 to 32 characters in length',
        portRule: 'Please enter a number from 1 to 65535',
        contractName: 'Please enter the contract name',
        contractInvokeMethod: 'Please enter the contract method',
        contractVersion: 'Please enter the contract version',
        description: 'template description',
        folderLong: '1 to 12 characters in length',
        accountRule: 'User name can only enter letters and numbers',
        portRule: 'Port can only enter numbers'
    },
    head: {
        group: 'Groups',
        changePassword: 'Change Password',
        exit: 'Exit',
        versionInfo: 'Version'
    },
    title: {
        dataOverview: 'Overview',
        contractTitle: 'Contract Mgmt',
        accountManagement: 'Account Mgmt',
        chainOrgManagement: 'Org Mgmt',
        systemMonitor: 'System Metrics',
        zoom: 'Zoom',
        back: 'Back',
        groupManagement: 'Account Group Mgmt',
        chainOrgDetail: 'Chain Org Detail',
        contractTemplate: 'Contract Template',
        blockchain4AppManagement: 'Blockchain of App Mgmt',
        systemMonitor: 'System Monitor',
        systemLogMonitor: 'System Log Monitor',
        chainEventMonitor: 'Chain Event Monitor',
        chainEventDetail: 'Chain Event Detail',
        nodeStatusMonitor: 'Node Status Monitor',
        noticeCenter: 'Notice Center',
        message: 'Message',
        backlog: 'Backlog',
        depositoryTitle: 'Depository',
        cmspEditor: 'Contract IDE'
    },
    home: {
        nodes: 'Nodes',
        contracts: 'Deployed Contracts',
        blocks: 'Blocks',
        transactions: 'Transactions',
        blockHeight: 'Block Height',
        block: 'Block',
        transaction: 'Transaction',
        more: 'More',
        chartTitle: 'Trancation',
        chartExplain: 'Transaction in last 24 hours',
        chartTransactions: 'Transactions'
    },
    contracts: {
        invokeSuccess: 'Invoke SuccessÔºÅ',
        contractName: 'Name',
        contractTemplateAddText: 'Add Contract Template',
        contractTemplateModifyText: 'Modify Contract Template',
        contractTemplateVersion: 'Contract Template Version',
        contractTemplateVersionAddText: 'Add Contract Template Version',
        contractTemplateVersionModifyText: 'Modify Contract Template Version',
        contractTemplateVersionCopyText: 'Copy Contract Template Version',
        addTemplate: 'Add Contract Template',
        contractTemplateName: 'Contract Template Name',
        contractTemplateVisibility: 'Contract Template Visibility',
        contractFileUpload: 'Contract File Upload',
        contractFileUploadDesc: 'Support File Suffix: .zip',
        contractTemplateDescription: 'Description',
        inputContractTemplateName: 'Please enter contract template name',
        inputContractTemplateVersion: 'Please enter version',
        selectContractTemplateVersion: 'Please select contract template version',
        selectContractTemplateVisibility: 'Please select contract template visibility',
        selectContractTemplateFile: 'Please select contract template file',
        selectContractTemplate: 'Please select contract',
        inputContractTemplateDescription: 'Please enter description',
        uploadFileInvalid: 'Illegal file format',
        inputDiffContractTemplateVersionTip: 'Attention: If the file of contract template is changed, a new version will be generated. The old data will be retained, and please note to modify the version number.',
        inputDiffContractTemplateName: 'Please change the template name',
        inputDiffContractTemplateVersion: 'Please change the template version',
        inputRuleVersion: 'The template version format is incorrect. Please start with a non-0 digit and enter only digits and "."',
        inputRuleVersionNumber: 'The entered version cannot be earlier than or equal to the latest version, which is ',
        addContractTemplateVersion: 'Add Version',
        copyContractTemplateVersion: 'Copy',
        downloadContractTemplate: 'Download',
        noContractFile: 'No Contract File',
        uploadFileSizeExceedsLmit: 'File size(maximum: 10M) exceeds limit',
        statusToDeploy: 'To Deploy',
        statusDeploying: 'Deploying',
        statusDeployed: 'Deployed',
        statusDeployFailed: 'Deploy Failed',
        statusToUpgrade: 'To Upgrade',
        statusUpgrading: 'Upgrading',
        statusToRevoke: 'To Revoke',
        statusRevoking: 'Revoking',
        statusDeployReject: 'Deploy Rejected',
        statusDeployCancel: 'Deploy Canceled',
        statusUnknown: 'Unknown',
        paramName: 'Parameter Name',
        paramValue: 'Parameter Value',
        revokeContractSuccess: 'The revoke contract task was successfully launched',
        upgradeContractSuccess: 'The upgrade contract task was successfully launched',
        attribute: 'Contract Attributes',
        updateTemplateVersion: 'The version of the same contract template must be changed during upgrade',
        deleteTemplate: 'Delete Template',
        updateTemplate: 'Change Template',
        deleteVersion: 'Delete Version',
        updateVersion: 'Change Template',
        editCode: 'Edit Code',
        creatorSearch: 'Search by Creator',
        contractNameSearch: 'Search by Contract Template Name',
        viewContractTemplateVersion: 'View Version',
        batchDeleteVersionMsg: 'The following contract template version have not been deleted, reason:'
    },
    system: {
        inputUser: 'Please enter your Account Name',
        deleteSuccess: 'Delete Successful',
        deployReqSendSuccess: 'deploy request send successfully'
    },
    account: {
        addAccount: 'Create',
        user: 'Account',
        userName: 'Account Name',
        roleNameZh: 'Role',
        group: 'Group',
        updateAccountGroup: 'Update Group',
        createAccount: 'Create Account',
        deleteAccount: 'Delete Account',
        updataAccount: 'Modify Account',
        email: 'Email',
        inputEmail: 'Please enter Email',
        emailTypeError: 'E-mail format is incorrect',
        contact: 'Contact',
        accountType: 'Account Type',
        inputAccountType: 'Please select account type',
        selectAccountGroup: 'Please select available account group',
        modifyPoGroupTip: "This account can only belong to Group 'CMSP Management Team'",
        userNameSearch: 'Search by account name',
        batchModifyGroupTip: 'The selected accounts cannot be changed account group',
        batchModifyGroupMsg: 'The group change of the following accounts is not completed, reason:',
        batchResetPasswordMsg: 'The reset password of the following accounts is not completed, reason:',
        batchDeleteAccountMsg: 'The following accounts have not been deleted, reason:'
    },
    accountGroup: {
        group: 'Account Group',
        info: 'Account Group Information',
        groupMgmt: 'Account Group Management',
        addGroup: 'Create Account Group',
        modifyGroup: 'Modify',
        deleteGroup: 'Delete',
        groupName: 'Group Name',
        groupNameZh: 'Group Chinese Name',
        accountNum: 'Account Number',
        accountGroupNum: 'Account Group Number',
        remarks: 'Group Remarks',
        inputName: 'Please input account group name',
        inputGroupEmpty: 'Group is required',
        inputZhGroupEmpty: 'Group Chinese Name is required',
        hasChild: 'Cannot delete, subgroup exists'
    },
    chainOrg: {
        addOrg: 'Create',
        name: 'Org Name',
        creator: 'Creator Account',
        creatorAccount: 'Org Creator Account',
        accountGroup: 'Account Group',
        chainNodeTotal: 'Node Total',
        chainNodeTotalShort: 'Nodes',
        chainUserTotal: 'User Total',
        chainUserTotalShort: 'Users',
        createChainOrg: 'Create Chain Org',
        modifyChainOrg: 'Modify Chain Org',
        deleteChainOrg: 'Delete Chain Org',
        inputName: 'Please Enter Org Name',
        detailPageTitle: 'Chain Org Information',
        chainOrgCertification: 'Chain Org Cert',
        chainOrgPem: 'Chain Org Key',
        chainOrgRemarks: 'Chain Org Remarks',
        viewCertification: 'View Cert',
        viewPem: 'View Key',
        downloadCertification: 'Download Cert',
        downloadPem: 'Download Key',
        nodeList: 'Node List',
        chainUserList: 'Chain User List',
        uploadCertification: 'Custom Cert',
        certification: 'Cert',
        signCertification: 'Sign Cert',
        tlsCertification: 'TLS Cert',
        certificationExpiryTime: 'Cert Expiry Time',
        signCertificationExpiryTime: 'Sign Cert Expiry Time',
        tlsCertificationExpiryTime: 'TLS Cert Expiry Time',
        certificationRenewal: 'Cert Renewal',
        signCertificationRenewal: 'Sign Cert Renewal',
        tlsCertificationRenewal: 'TLS Cert Renewal',
        certificationRenewalConfirm: 'Are you sure to renewal Cert',
        certificationRenewalSuccess: 'Cert Renewal Success',
        cert: 'Cert',
        certKey: 'Private Key',
        signCert: 'Sign Cert',
        signKey: 'Sign Private Key',
        tlsCert: 'TLS Cert',
        tlsKey: 'TLS Private Key',
        certRequired: 'Please select cert',
        certKeyRequired: 'Please select cert private key',
        signCertRequired: 'Please select sign cert',
        signKeyRequired: 'Please select sign private key',
        tlsCertRequired: 'Please select tls cert',
        tlsKeyRequired: 'Please select tls private key',
        uploadCertInvalid: 'Illegal file format',
        uploadCertSizeExceedsLmit: 'File size(maximum: 1M) exceeds limit',
        certUploadTip: 'Only crt files can be uploaded, and no more than 1MB',
        certKeyUploadTip: 'Only key files can be uploaded, and no more than 1MB',
        joinInOrgName: 'Join In Org',
        selectJoinInOrg: 'Please select the org you want to join in the chain',
        joinInOrgText: 'Join In Org Apply',
        joinInSuccess: 'Org join in multi sign request initiated successfully',
        nameSearch: 'Search by Org name',
        uploadPublicKeyIdentity: 'Custom PKI',
        pemName: 'Pem',
        keyName: 'Key',
        pemUploadTip: 'Only pem files can be uploaded, and no more than 1MB',
        keyUploadTip: 'Only key files can be uploaded, and no more than 1MB',
        pemRequired: 'Please select pem',
        keyRequired: 'Please select key',
        uploadPemInvalid: 'Illegal file format, must be a pem file',
        uploadKeyInvalid: 'Illegal file format, must be a key file',
        uploadPemSizeExceedsLmit: 'File size(maximum: 1M) exceeds limit',
        uploadKeySizeExceedsLmit: 'File size(maximum: 1M) exceeds limit'
    },
    chainNode: {
        nodeAddText: 'Add Node',
        nodeModifyText: 'Modify Node',
        nodeName: 'Node Name',
        joinInConsensusNode: 'Join In Consensus Node',
        nodeId: 'Node ID',
        nodeType: 'Node Type',
        nodeAddr: 'Node Address',
        nodePort: 'Node RPC Port',
        nodeRPCPort: 'Node RPC Port',
        nodeMonitorPort: 'Monitor Port',
        nodeP2pPort: 'P2P Port',
        nodeStatus: 'Node Status',
        running: 'Running',
        notRun: 'Not Run',
        remarks: 'Node Remarks',
        chainName: 'Chain Name',
        operation: 'Actions',
        viewCertification: 'View Cert',
        downloadCertification: 'Download Cert',
        inputUser: 'Please enter your Account Name',
        inputNodeName: 'Please enter node name',
        inputNodeAddr: 'Please enter node address',
        inputNodePort: 'Please enter node RPC port',
        inputNodeMonitorPort: 'Please enter monitor port',
        inputNodeP2pPort: 'Please enter p2p port',
        inputRemarks: 'Please enter node remarks',
        selectNodeType: 'Please select node type',
        nodeOrg: 'Chain Org',
        node: 'Node',
        nodeJoinIn: 'Join In Node',
        nodeJoinInText: 'Join In Node Apply',
        nodeUnJoinInText: 'Remove Node Apply',
        selectJoinInNode: 'Please select the node you want to join in the chain',
        selectJoinInConsensusNode: 'Select a consensus node to be added',
        joinInApplySuccess: 'Node join in multi sign request initiated successfully',
        joinInSuccess: 'Node join in successfully',
        nodeUnJoin: 'Remove',
        confirmUnJoin: 'Are you sure to remove node',
        confirmUnJoinApply: 'Are you sure to send request of the node remove ?',
        confirmUnJoinLastApply: 'This node is the last node in the organization. If it is removed, the organization will also be removed, and the subscription of the current chain will be canceled! Are you sure to send request of the node remove ?',
        unJoinSuccess: 'Node remove successfully, please stop the running node package',
        unJoinSuccessApply: 'Node remove multi sign request initiated successfully',
        makeNodePackage: 'Make Package',
        confirmMakeNodePackage: 'The node installation package already exists. Are you sure to rebuild it? This action will delete the old node installation package.',
        downloadNodePackage: 'Download Package',
        makeNodePackageSuccess: 'Make node installation package successfully',
        makeNodePackageBeforeJoinIn: 'Please make a node installation package and deploy it before node join in',
        deployNodePackageBeforeJoinInTip: 'Attention: Please deploy the node installation package before node access',
        nodeIdSearch: 'Search by Node Id'
    },
    chainUser: {
        userAddText: 'Add Chain User',
        userRemoveText: 'Remove Chain User',
        userModifyText: 'Modify Chain User',
        userName: ' User Name',
        registerChainUser: 'Register Chain User',
        selectRegisterChainUser: 'Select the identity of the user to be registered',
        account: 'Account',
        bindingAccount: 'Binding Account',
        userType: 'User Type',
        remarks: 'User Remarks',
        operation: 'Actions',
        viewCertification: 'View Cert',
        downloadCertification: 'Download Cert',
        inputUserName: 'Please enter user name',
        selectAccount: 'Please select account',
        selectUser: 'Please select user',
        inputRemarks: 'Please enter user remarks',
        selectUserType: 'Please select user type',
        user: 'Chain User',
        userRegText: 'Register User',
        selectRegUser: 'Please select the user you want to register to the chain',
        orgName: 'Chain Org',
        userCancel: 'Cancel',
        userCancelText: 'Cancel User',
        regSuccess: 'Register Success',
        confirmUnReg: 'Are you sure to cancel',
        unRegSuccess: 'Cancel Success',
        bindingAccountSearch: 'Search by Account Name',
        batchDeleteUserMsg: 'The following chain user have not been deleted, reason:',
        batchCancelUserMsg: 'The following chain user have not been canceled, reason:'
    },
    chainSubscribe: {
        title: 'App Chain Subscribe',
        name: 'Subscribe Name',
        chainId: 'App Chain ID',
        chainName: 'App Chain Name',
        orgId: 'Chain Org',
        chainUserId: 'Chain User',
        chainNodeId: 'Chain Node',
        inputName: 'Please enter app chain subscribe name',
        inputChainId: 'App chain id can not null',
        selectOrgId: 'Please select chain org',
        selectChainUserId: 'Please select chain user',
        selectChainNodeId: 'Please select chain node',
        subscribeSuccess: 'Subscribe Successfully',
        newBtnText: 'Add'
    },
    blockchain4App: {
        appChain: 'Blockchain',
        create: 'Create',
        make: 'Make',
        delete: 'Delete',
        modify: 'Modify',
        subscribe: 'Subscribe',
        joinInOrg: 'Apply For Join In',
        joinedInOrg: 'Joined in',
        inputName: 'Please enter blockchain name',
        inputId: 'Please enter blockchain id',
        name: 'Blockchain Name',
        id: 'Blockchain ID',
        creator: 'Creator',
        remarks: 'Remarks',
        chainOrgList: 'Chain Org List',
        selectChainOrgList: 'Please select chain org list',
        chainOrgCountLimit: 'The number of chain org cannot be less than 4',
        orgCount: 'Org joined the Blockchain',
        orgCountShort: 'Orgs',
        nodeCount: 'Node Count',
        nodeCountShort: 'Nodes',
        createTime: 'Create Time',
        operation: 'Actions',
        unSubscribe: 'Unsubscribe',
        confirmUnSubscribe: 'Are you sure to unsubscribe',
        unSubscribeSuccess: 'Unsubscribe successfully!',
        revokeContractTitle: 'revoke contract',
        detail: 'Blockchain Detail',
        detailTitle: 'Information of the Blockchain for Application',
        blockMaxCapacity: 'Block maximum capacity',
        blockMaxCapacityUnit: 'deal',
        inputBlockMaxCapacity: 'Please input block maximum capacity',
        blockMaxCapacityNumber: 'Block maximum capacity must be Number',
        transaction: 'transaction',
        overdue: 'Transaction expiration time',
        overdueUnit: 's',
        inputOverdue: 'Please input transaction expiration time',
        overdueNumber: 'Transaction expiration time must be Number',
        outInterval: 'Out of block interval',
        outIntervalUnit: 'ms',
        inputOutInterval: 'Please input out of block interval',
        outIntervalNumber: 'Out of block interval must be Number',
        consensusType: 'Consensus Type',
        selectConsensusType: 'Please select consensus type',
        orgList: 'Org List',
        userList: 'User List',
        nodeList: 'Node List',
        contractList: 'Contract List',
        contract: 'Contract',
        blockList: 'Block List',
        transactionList: 'Transaction List',
        nodeTotal: 'Node Total',
        userTotal: 'User Total',
        updateSuccessMsg: 'The modify chain task was successfully launched',
        modifySignTitle: 'Modify blockchain task in progress...',
        cancelModifySign: 'Cancel the modify task',
        confirmCancel: 'Are you sure to cancel modify chain',
        cancelUpdateSuccessMsg: 'Cancel modify chain success',
        attribute: 'Chain Attributes',
        beginMakeChainSuccess: 'The apply of make chain submit successfully',
        makeChainApplySuccess: 'The apply of make chain process successfully',
        beginDeleteChainSuccess: 'The apply of delete chain submit successfully',
        idSearch: 'Search by Chain ID',
        joinState: 'Join State',
        joined: 'Joined',
        unJoin: 'unJoin'
    },
    block: {
        blockHeight: 'Block Height',
        blockHash: 'Block Hash',
        blockIden: 'Block Node',
        blockTimestamp: 'Block Timestamp',
        transactionNum: 'Transaction',
        detailTitle: 'Block Detail',
        basicInfo: 'Block Basic Information',
        frontBlockHash: 'Front Block Hash',
        timestamp: 'Timestamp',
        outBlockOrg: 'Out of block Org',
        outBlockNode: 'Out of block node',
        transactionInfo: 'Transaction Information',
        chainTime: 'Chain Time',
        depInfo: 'Block Information',
        blockHeightSearch: 'Search by Block Height'
    },
    transaction: {
        stroke: 'Stroke',
        id: 'Transaction ID',
        creator: 'Initiator',
        organized: 'Organized',
        userName: 'User Name',
        type: 'Transaction Type',
        timestamp: 'Timestamp',
        blockHeight: 'Block Height',
        detailTitle: 'Transaction Detail',
        state: 'Transaction State',
        send: 'Transaction Send User',
        sendTime: 'Transaction Send Time',
        contractInfo: 'Contract Information',
        relContract: 'Contract',
        contractParams: 'Contract Params',
        contractResult: 'Contract Result',
        consensusOrg: 'Consensus Org',
        methodName: 'Method Name',
        unknown: 'Unknown',
        idSearch: 'Search by Transaction ID'
    },
    chainEvent: {
        filterAppChain: 'App Chain',
        filterContract: 'Contrace',
        filterEventName: 'Event',
        chainId: 'App Chain ID',
        contractName: 'Contract Name',
        contractVersion: 'Contract Version',
        eventName: 'Event Name',
        blockHeight: 'Block Height',
        triggerTime: 'Trigger Time',
        operation: 'Actions',
        chainName: 'App Chain Name',
        eventContent: 'Event Content',
        transactionDetailTitle: 'Transaction Details Corresponding To The Event'
    },
    systemLog: {
        title: 'Log Detail',
        level: 'Level',
        content: 'Content',
        exception: 'Exception',
        timestamp: 'Timestamp'
    },
    monitor: {
        chainOrg: 'Organization',
        appChainName: 'App Chain Name',
        appChainCode: 'App Chain ID',
        createTime: 'Create Time',
        last1Hour: 'Last 1 Hour',
        last3Hour: 'Last 3 Hour',
        today: 'Today',
        last3Day: 'Last 3 Day',
        thisWeek: 'This Week',
        thisMonth: 'This Month',
        txCount: 'Transaction Count',
        blockCount: 'Block Count',
        txRequestCount: 'Transaction Request Count',
        searchRequestCount: 'Search Request Count',
        cpuUsage: 'CPU Usage',
        memoryUsage: 'Memory Usage',
        countUnit: '',
        noData: 'No data collected'
    },
    alarm: {
        alarmCofig: 'Alarm Config',
        alarmType: 'Alarm Type',
        messageContent: 'Message Content',
        sendTime: 'Interval',
        minute: 'min',
        update: 'Modify Alarm Config',
        inputSendTime: 'Please enter interval',
        inputSendTimeRule: 'Interval must be number',
        inputMessageContent: 'Please enter message content',
        sendType: 'Send Type',
        sendType1: 'System message',
        sendType2: 'E-mail',
        receiveAccount: 'Receive Alarm Account',
        selectReceiveAccount: 'Please choose the account that received alarm',
        inputContentRule: 'Format error, pay attention to parameters order, and the total of parameters is ',
        inputContentParamUnit: '',
        inputContentRuleParam0: 'Format error, parameter{0} repeat',
        inputContentRuleParam1: 'Format error, parameter{1} repeat',
        inputContentRuleParam2: 'Format error, parameter{2} repeat',
        inputIntervalZero: 'The interval cannot be 0'
    },
    noticeCenter: {
        unRead: 'UnRead',
        readed: 'Readed',
        noticeType: 'Message Type',
        noticeContent: 'Message Content',
        noticeTime: 'Create Time',
        checkRead: 'Check Read',
        readSuccessMsg: 'Readed Success'
    },
    backlog: {
        type: 'Type',
        operate: 'Operate',
        content: 'Content',
        timestamp: 'Update Time',
        status: 'Status',
        beforeModify: 'Before Modify',
        afterModify: 'After Modify',
        beforeUpgrade: 'Before Upgrade',
        afterUpgrade: 'After Upgrade',
        agree: 'Agree',
        refuse: 'Refuse',
        confirmRefuse: 'Are you sure to refuse ?',
        voteSuccess: 'Vote Success',
        cancel: 'Cancel',
        cancelSuccess: 'Cancel Success',
        confirmCancel: 'Confirm to cancel the backlog ?',
        download: 'Download',
        optTypeDownload: 'Package Download'
    },
    depository: {
        createTemplate: 'Create Template',
        saveDepository: 'Write Depository Information',
        saveDepositoryTitle: 'Write Depository Information',
        modifyDepositoryTitle: 'Modify Depository Information',
        template: 'Template',
        timestamp: 'Submit Time',
        validateTime: 'Validate Time',
        selectAppChain: 'Please select chain',
        selectContract: 'Please select contract',
        templateName: 'Template Name',
        inputTemplateName: 'Please input depository template name',
        params: 'Depository Params',
        paramName: 'Key',
        paramType: 'Type',
        paramTypeString: 'STRING',
        paramTypeInteger: 'INTEGER',
        paramTypeFloat: 'FLOAT',
        paramTypeFile: 'FILE',
        noParameters: 'The depository template must contain at least one parameter',
        repeatParameters: 'The depository template parameter name must be unique',
        selectTemplate: 'Please select the depository template first',
        emptyParameterName: 'Parameter name with null value',
        emptyParameterType: 'no parameter type is set',
        inputFormElement: 'Please input',
        ruleInt: ' must be integer',
        ruleFloat: ' must be float',
        validate: 'Validate',
        validateBtn: 'Verify',
        validateTitle: 'depository validate automatic repair',
        validateSuccess: 'Validate success',
        validateBefore: 'Before validation',
        validateAfter: 'After validation',
        fileRequired: ' file must upload',
        uploadFileSizeExceedsLmit: 'File size(maximum: 5M) exceeds limit',
        history: 'Version History',
        validateFileFailed: 'The file is different from the chain depository file',
        org: 'Org'
    },
    cmspEditor: {
        workspace: 'Workspace',
        expand: 'Expand Workspace',
        collapse: 'Collapse Workspace',
        fileEmpty: 'Contract code file empty',
        buildContract: 'Build contract',
        invokeContract: 'Invoke contract',
        saveToCurrVer: 'Save to the current version',
        saveAsNewVer: 'Save as a new version',
        exit: 'Exit the contract IDE',
        output: 'output',
        event: 'event',
        worldState: 'world state',
        addFolder: 'Add Folder',
        addFile: 'Add File',
        importFile: 'Import File',
        exportFile: 'Export',
        rename: 'Rename',
        removeFolder: 'Remove Folder',
        removeFile: 'Remove File',
        targetPath: 'Target path',
        folder: 'Folder',
        file: 'File',
        selectFile: 'Select File',
        selectImportFile: 'Please select the file to import',
        importFileSizeExceedsLmit: 'Import file size(maximum: 1M) exceeds limit',
        importFileSuccess: 'Import file success',
        folderName: 'Folder Name',
        fileName: 'File Name',
        inputFolderName: 'Please input the folder name',
        inputFileName: 'Please input the file name',
        addFolderSuccess: 'Add folder success',
        addFileSuccess: 'Add file success',
        removeFolderSuccess: 'Remove folder success',
        removeFileSuccess: 'Remove File success',
        originalName: 'Original Name',
        replaceName: 'Replace Name',
        inputReplaceName: 'Please input the new name',
        repeatReplaceName: 'The replace name is the same as the original name',
        renameSuccess: 'Rename success',
        buildLoading: 'Contract building......',
        buildSuccess: 'Build contract codes success',
        buildFailed: 'Build contract failed, cause: ',
        openFileLoading: 'contract code is loading...',
        confirmCodeChanged: 'The code has changed and you have decided to discard the changed code ?',
        cannotRename: 'Code has unsaved changes and cannot be renamed',
        cannotExport: 'Code has unsaved changes and cannot be exported',
        buildPrompt: 'Code has unsaved changes and will be built using the code before you changed. If you want to build the changed code, first "Save to current version" or "Save as new version"',
        saveToCurrVerLoading: 'Saving the contract code to the current contract template version...',
        saveToCurrVerSuccess: 'Saving the contract code to the current contract template version success',
        inputNewTemplateVersion: 'Please enter the version number, recommended to use: ',
        saveAsNewVerSuccess: 'Saving the contract code to the new version of the contract template succeeded',
        folderNotEmpty: 'and all sub folders and files',
        clean: 'Clean',
        eventData: 'Event Content',
        contractMethod: 'Contract Method',
        selectContractMethod: 'Please select the method to invoke',
        cleanParams: 'Clean the parameters',
        confirmCleanArgs: 'Verify that the mock contract call parameters for the current method are cleared',
        cleanMethodArgsSuccess: 'Clearing simulated contract call parameters success',
        invokeFailed: 'Invoke contract failed, cause: ',
        invokeSuccess: 'Invoke contract success, result: '
    },
    main: {
        resetPassword: 'Reset Password',
        changePassword: 'Change Password',
        oldPassword: 'Old password',
        newPassword: 'New password',
        confirmPassword: 'Confirm password',
        submit: 'Submit',
        reset: 'Reset',
        inputPassword: 'Please enter the password',
        againPassword: 'Please enter the password again',
        passwordError: 'The passwords entered twice are inconsistent!',
        inputOldPassword: 'Please enter the old password',
        longPassword: '6 to 12 characters',
        passwordPattern: 'Letters, numbers, and at least one uppercase letter and one lowercase letter',
        updatePsdSuccess: 'Password reset complete!',
        updatePsdError: 'Password change failed!'
    },
    table: {
        templateName: 'Template Name',
        templateVersion: 'Template Version',
        templateCreator: 'Template Creator',
        templateCreatorShort: 'Creator',
        templateVisibility: 'Template Visibility',
        templateVisibilityShort: 'Visibility',
        templateDescription: 'Template Description',
        templateDescriptionShort: 'Description',
        templateOperation: 'Actions',
        templateVersionCount: 'Number of Versions',
        templateVersionStroke: '',
        contractName: 'Contract Name',
        contractId: 'ContractID',
        contractVersion: 'Version',
        contractOrg: 'Orgination',
        contractCreator: 'Account',
        contractUpdateTime: 'Update Time',
        contractDeploy: 'Deploy Contract',
        contractChainStatus: 'Status',
        contractChainStatusDeploy: 'Deploying',
        contractChainStatusRunning: 'Running',
        contractChainStatusFailure: 'Deploy failed',
        contractOperation: 'Operation',
        contractUpgrade: 'Upgrade',
        contractUpgradeTitle: 'Upgrade Contract',
        contractInvoke: 'Invoke',
        contractInvokeTitle: 'Invoke Contract',
        contractRevoke: 'Revoke',
        contractRevokeTitle: 'Revoke Contract',
        contractDelete: 'Delete',
        confirmReovke: 'Do you want to revoke the contract ',
        contractComment: 'Comment',
        contractInvokeMethod: 'Invoke Method',
        contractCreatorAccount: 'Creator',
        contractChainOrg: 'Orgination',
        contractHint: 'Please enter the parameters',
        accountName: 'Creator',
        accountGroupName: 'Orgination',
        drawerTitle1: ' there are ',
        drawerTitle2: ' versions'
    },
    permission: {
        all: 'Visible To All',
        group: 'Visible To Group',
        owner: 'Visible To Owner'
    }
}
